<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="5" passed="2" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-04-10T20:50:07 KST" name="ExtentReport" finished-at="2023-04-10T20:53:04 KST" duration-ms="176837">
    <groups>
    </groups>
    <test started-at="2023-04-10T20:50:07 KST" name="Test_Project" finished-at="2023-04-10T20:53:04 KST" duration-ms="176837">
      <class name="Apollo_001_공통.Apollo_03_공통">
        <test-method is-config="true" signature="setupClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:50:07 KST" name="setupClass" finished-at="2023-04-10T20:50:17 KST" duration-ms="10440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Android]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[APOLLO_STG]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[http://0.0.0.0:4723/wd/hub]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[STG]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Apollo]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[R33M4000CY]]>
              </value>
            </param>
            <param index="7">
              <value>
                <![CDATA[adot]]>
              </value>
            </param>
            <param index="8">
              <value>
                <![CDATA[APL00000CAP8UMKRSNB4]]>
              </value>
            </param>
            <param index="9">
              <value>
                <![CDATA[APL00000CAP8UMNEOSG0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method is-config="true" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:50:17 KST" name="BeforeMethod" finished-at="2023-04-10T20:50:17 KST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_006_004_007(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method signature="TC_006_004_007(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:50:17 KST" name="TC_006_004_007" description="A. Hotfix Regression Test : 006-004-007 calc_case1_001 계산 기능 + 출력 가능 범위" finished-at="2023-04-10T20:51:03 KST" duration-ms="46148" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_006_004_007(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_006_004_007 -->
        <test-method is-config="true" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:03 KST" name="AfterMethod" finished-at="2023-04-10T20:51:03 KST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_006_004_007 status=SUCCESS method=Apollo_03_공통.TC_006_004_007(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method is-config="true" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:03 KST" name="BeforeMethod" finished-at="2023-04-10T20:51:03 KST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_007_003_001(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method signature="TC_007_003_001(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:03 KST" name="TC_007_003_001" description="A. Hotfix Regression Test : 007-003-001 apollo_news_play_recent_001 뉴스 재생" finished-at="2023-04-10T20:51:32 KST" duration-ms="28235" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_007_003_001(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at Apollo_001_공통.Apollo_03_공통.TC_007_003_001(Apollo_03_공통.java:145)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_007_003_001 -->
        <test-method is-config="true" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:32 KST" name="AfterMethod" finished-at="2023-04-10T20:51:32 KST" duration-ms="654" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_007_003_001 status=FAILURE method=Apollo_03_공통.TC_007_003_001(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="TC_008_001_002(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:32 KST" name="TC_008_001_002" description="A. Hotfix Regression Test : 008-001-002 fortune_dux_002 Template + CardTableScrollable" finished-at="2023-04-10T20:52:00 KST" duration-ms="28157" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_008_001_002(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at Apollo_001_공통.Apollo_03_공통.TC_008_001_002(Apollo_03_공통.java:169)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_008_001_002 -->
        <test-method is-config="true" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:51:32 KST" name="BeforeMethod" finished-at="2023-04-10T20:51:32 KST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_008_001_002(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method is-config="true" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:00 KST" name="AfterMethod" finished-at="2023-04-10T20:52:01 KST" duration-ms="587" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_008_001_002 status=FAILURE method=Apollo_03_공통.TC_008_001_002(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="TC_008_004_002(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:01 KST" name="TC_008_004_002" description="A. Hotfix Regression Test : 008-004-001 fortune_zodiac_001 띠 운세 + 날짜 지정 + 띠 이름 O" finished-at="2023-04-10T20:52:39 KST" duration-ms="38287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_008_004_002(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_008_004_002 -->
        <test-method is-config="true" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:01 KST" name="BeforeMethod" finished-at="2023-04-10T20:52:01 KST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_008_004_002(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method is-config="true" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:39 KST" name="AfterMethod" finished-at="2023-04-10T20:52:39 KST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_008_004_002 status=SUCCESS method=Apollo_03_공통.TC_008_004_002(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="TC_010_003_001(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:39 KST" name="TC_010_003_001" description="A. Hotfix Regression Test : 010-003-001 weather_cast_default_001 시간/날짜 미지정" finished-at="2023-04-10T20:53:02 KST" duration-ms="23061" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_010_003_001(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at Apollo_001_공통.Apollo_03_공통.TC_010_003_001(Apollo_03_공통.java:218)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC_010_003_001 -->
        <test-method is-config="true" signature="BeforeMethod(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:52:39 KST" name="BeforeMethod" finished-at="2023-04-10T20:52:39 KST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void Apollo_001_공통.Apollo_03_공통.TC_010_003_001(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method is-config="true" signature="AfterMethod(org.testng.ITestResult)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:53:02 KST" name="AfterMethod" finished-at="2023-04-10T20:53:03 KST" duration-ms="577" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_010_003_001 status=FAILURE method=Apollo_03_공통.TC_010_003_001(java.lang.reflect.Method)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method is-config="true" signature="tearDownClass(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:Apollo_001_공통.Apollo_03_공통@3eb738bb]" started-at="2023-04-10T20:53:03 KST" name="tearDownClass" finished-at="2023-04-10T20:53:04 KST" duration-ms="660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[STG]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[APOLLO_STG]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[R33M4000CY]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[adot]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[APL00000CAP8UMKRSNB4]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[APL00000CAP8UMNEOSG0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- Apollo_001_공통.Apollo_03_공통 -->
    </test> <!-- Test_Project -->
  </suite> <!-- ExtentReport -->
</testng-results>
